{"version":3,"sources":["assets/images/my-hero-img.png","components/navbar.js","assets/svgs/logo.js","components/hero.js","screens/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","props","className","logo","Logo","width","height","viewBox","fill","xmlns","d","stroke","Hero","src","myImg","alt","HomeScreen","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,yC,2NC+B5BC,G,MA5BO,SAACC,GACrB,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACZD,EAAME,MAET,yBAAKD,UAAU,eACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,mBAAlB,UAEF,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,mBAAlB,SAEF,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,mBAAlB,eAKR,yBAAKA,UAAU,mBCjBNE,EALD,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC9E,0BAAMC,EAAE,4zBAA4zBC,OAAO,W,iBC6B9zBC,G,MA1BF,WACX,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,iBACb,yBAAKW,IAAKC,IAAOC,IAAI,GAAGb,UAAU,gBAClC,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,YACA,wBAAIA,UAAU,SAAd,UACA,wBAAIA,UAAU,kBAGlB,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,aAAd,sBAGA,wBAAIA,UAAU,mBAAd,sBACA,wBAAIA,UAAU,mBAAd,aACA,uBAAGA,UAAU,mBAAb,sMACA,uBAAGA,UAAU,iBAAb,gCCTKc,EAVI,WACjB,OAAQ,oCACN,kBAAC,EAAD,CACEb,KAAMC,IAER,kBAAC,EAAD,Q,MCMWa,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWH,OCCfI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3dbbde2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/my-hero-img.2a44e5ad.png\";","import React from 'react';\nimport '../styles/components/navigation.scss';\n\nconst NavigationBar = (props) => {\n  return (\n    <div className='navbar-wrap'>\n      <div className=\"desk-wrap\">\n        <div className='left-panel'>\n          {props.logo}\n        </div>\n        <div className='right-panel'>\n          <div className=\"menu-items-wrap\">\n            <div className=\"menu-item-wrap\">\n              <button className='hch-btn-primary'>About</button>\n            </div>\n            <div className=\"menu-item-wrap\">\n              <button className='hch-btn-primary'>Work</button>\n            </div>\n            <div className=\"menu-item-wrap\">\n              <button className='hch-btn-primary'>Contact</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"mobile-wrap\">\n\n      </div>\n    </div>\n  );\n};\n\nexport default NavigationBar;","import React from 'react';\n\nconst Logo = (<svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M1 12.9217L24.5932 1L32.3371 5.01739L25.0452 9.11304L32.7589 12.9217M1 12.9217L8.80414 17.0957M1 12.9217V36.9217L8.80414 40.7043M8.80414 17.0957L16.5179 12.9217M8.80414 17.0957V24.8435M16.5179 12.9217L24.5932 17.0957L16.5179 21.0348M16.5179 12.9217V21.0348M16.5179 21.0348L24.5932 24.8435M16.5179 21.0348L8.80414 24.8435M16.5179 21.0348V28.5739L8.80414 24.8435M24.5932 24.8435L48.4576 12.9217M24.5932 24.8435V49M48.4576 12.9217L40.8343 9.11304L32.7589 12.9217M48.4576 12.9217L49 36.9217L40.8343 40.7043M32.7589 12.9217V5.01739M8.80414 40.7043V33.2696L17.1507 36.9217M8.80414 40.7043L17.1507 36.9217M17.1507 36.9217V45.4261L24.5932 49M24.5932 49L32.7589 45.113V36.9217V36.8435M40.8343 40.7043V33.2696L32.7589 36.8435M40.8343 40.7043L32.7589 36.8435M40.8343 25.287L32.7589 29.0174V21.3478L40.8343 25.287ZM40.8343 25.287V17.0957\" stroke=\"white\"/>\n</svg>\n);\n\nexport default Logo;","import React from 'react';\n\nimport myImg from '../assets/images/my-hero-img.png';\n\nimport '../styles/components/hero.scss';\n\nconst Hero = () => {\n  return (\n    <div className=\"hero-wrap\">\n      <div className=\"_main-content-wrap\">\n        <div className=\"img-name-wrap\">\n          <img src={myImg} alt=\"\" className=\"my-img-wrap\"/>\n          <div className='name-wrap'>\n            <h1 className='fname'>Himanshu</h1>\n            <h1 className='lname'>Chanan</h1>\n            <hr className='fake-border' />\n          </div>\n        </div>\n        <div className=\"my-info-wrap\">\n          <h1 className=\"role-name\">\n            Software Developer\n          </h1>\n          <h1 className='location-info-1'>Based Out of India</h1>\n          <h1 className='location-info-2'>Something</h1>\n          <p className='some-info-block'>some  more info , i do this and thata and this and that some more text etc and some more text some random qoute, in the end it’s not the years that count it’s the life in those years. </p>\n          <p className='contact-email'>himanshu2904@outlok.com</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;","import React from 'react';\nimport NavigationBar from '../components/navbar';\n\nimport Logo from '../assets/svgs/logo';\nimport Hero from '../components/hero';\n\nconst HomeScreen = () => {\n  return (<>\n    <NavigationBar \n      logo={Logo}\n    />\n    <Hero />\n  </>\n  );\n};\n\nexport default HomeScreen;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch }  from 'react-router-dom';\n\nimport HomeScreen from './screens/home';\n\nimport './app.scss';\n\nfunction App () {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' component={HomeScreen} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}